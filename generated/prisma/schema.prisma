generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String?              @unique
  password            String
  role                Role
  rollNumber          String               @unique
  classId             String? // Only for STUDENT users
  class               Class?               @relation("StudentClass", fields: [classId], references: [id])
  teachingAssignments TeachingAssignment[] @relation("StaffTeaching")
  groups              GroupMember[]        @relation("UserGroups")
  evaluations         Evaluation[]         @relation("StaffEvaluations")

  @@index([email])
  @@index([rollNumber])
}

enum Role {
  STUDENT
  STAFF
  ADMIN
}

model Department {
  id             String    @id @default(cuid())
  name           String    @unique
  totalSemesters Int
  batches        Batch[]
  subjects       Subject[]
}

model Batch {
  id             String     @id @default(cuid())
  departmentId   String
  department     Department @relation(fields: [departmentId], references: [id])
  graduationYear Int
  classes        Class[]

  @@unique([departmentId, graduationYear])
  @@index([departmentId])
}

model Class {
  id                  String               @id @default(cuid())
  batchId             String
  batch               Batch                @relation(fields: [batchId], references: [id])
  section             String
  students            User[]               @relation("StudentClass")
  teachingAssignments TeachingAssignment[]
  groups              Group[]

  @@unique([batchId, section])
  @@index([batchId])
}

model Subject {
  id                  String               @id @default(cuid())
  name                String
  departmentId        String
  department          Department           @relation(fields: [departmentId], references: [id])
  semester            Int
  teachingAssignments TeachingAssignment[]
  projectSubjects     ProjectSubject[]
  reviewSubjects      ReviewSubject[]

  @@index([departmentId])
}

model TeachingAssignment {
  id        String  @id @default(cuid())
  staffId   String
  staff     User    @relation("StaffTeaching", fields: [staffId], references: [id])
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   String
  class     Class   @relation(fields: [classId], references: [id])

  @@unique([staffId, subjectId, classId])
}

model Group {
  id       String        @id @default(cuid())
  name     String
  classId  String
  class    Class         @relation(fields: [classId], references: [id])
  members  GroupMember[]
  projects Project[]
}

model GroupMember {
  groupId String
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation("UserGroups", fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Project {
  id                    String           @id @default(cuid())
  title                 String?
  description           String?
  githubRepo            String?
  groupId               String
  group                 Group            @relation(fields: [groupId], references: [id])
  proposedTitle         String?
  titleStatus           TitleStatus?     @default(PENDING)
  titleProposalDeadline DateTime?
  subjects              ProjectSubject[]
  submissions           Submission[]

  @@index([groupId])
}

enum TitleStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ProjectSubject {
  projectId String
  subjectId String
  project   Project @relation(fields: [projectId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([projectId, subjectId])
}

model Review {
  id             String          @id @default(cuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  departmentId   String?
  batchId        String?
  classId        String?
  semester       Int
  reviewSubjects ReviewSubject[]
  rubrics        Rubric[]
  submissions    Submission[]
}

model ReviewSubject {
  reviewId  String
  subjectId String
  review    Review  @relation(fields: [reviewId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([reviewId, subjectId])
}

model Rubric {
  id               String            @id @default(cuid())
  reviewId         String
  review           Review            @relation(fields: [reviewId], references: [id])
  criterion        String
  maxScore         Int
  evaluationScores EvaluationScore[]

  @@index([reviewId])
}

model Submission {
  id          String       @id @default(cuid())
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id])
  reviewId    String
  review      Review       @relation(fields: [reviewId], references: [id])
  report      String
  fileUrl     String
  submittedAt DateTime
  llmSummary  String?
  evaluations Evaluation[]

  @@index([projectId])
  @@index([reviewId])
}

model Evaluation {
  id           String            @id @default(cuid())
  submissionId String
  submission   Submission        @relation(fields: [submissionId], references: [id])
  staffId      String
  staff        User              @relation("StaffEvaluations", fields: [staffId], references: [id])
  comment      String?
  scores       EvaluationScore[]
}

model EvaluationScore {
  id           String     @id @default(cuid())
  evaluationId String
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  rubricId     String
  rubric       Rubric     @relation(fields: [rubricId], references: [id])
  score        Int
}
