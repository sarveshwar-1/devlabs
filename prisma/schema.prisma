// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for students, staff, and admins
model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                Role
  classId             Int? // Only for students
  class               Class?               @relation("StudentClass", fields: [classId], references: [id])
  teachingAssignments TeachingAssignment[] @relation("StaffTeaching")
  groups              GroupMember[]        @relation("UserGroups")
  evaluations         Evaluation[]         @relation("StaffEvaluations")

  @@index([email])
}

// Role enumeration
enum Role {
  STUDENT
  STAFF
  ADMIN
}

// Department model
model Department {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  classes  Class[]
  subjects Subject[]
}

// Class model (year, section, department)
model Class {
  id                  Int                  @id @default(autoincrement())
  departmentId        Int
  department          Department           @relation(fields: [departmentId], references: [id])
  year                Int
  section             String
  students            User[]               @relation("StudentClass")
  teachingAssignments TeachingAssignment[]
  groups              Group[]

  @@unique([departmentId, year, section])
  @@index([departmentId])
}

// Subject model (courses tied to department and year)
model Subject {
  id                  Int                  @id @default(autoincrement())
  name                String
  departmentId        Int
  department          Department           @relation(fields: [departmentId], references: [id])
  year                Int
  teachingAssignments TeachingAssignment[]
  projectSubjects     ProjectSubject[]

  @@index([departmentId])
}

// TeachingAssignment links staff to subjects and classes
model TeachingAssignment {
  id        Int     @id @default(autoincrement())
  staffId   Int
  staff     User    @relation("StaffTeaching", fields: [staffId], references: [id])
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])

  @@unique([staffId, subjectId, classId])
}

// Group model for student project groups
model Group {
  id       Int           @id @default(autoincrement())
  name     String
  classId  Int
  class    Class         @relation(fields: [classId], references: [id])
  members  GroupMember[]
  projects Project[]
}

// Many-to-many relationship between Group and User (students)
model GroupMember {
  groupId Int
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  user    User  @relation("UserGroups", fields: [userId], references: [id])

  @@id([groupId, userId])
}

// Project model with GitHub repo and title approval
model Project {
  id                    Int              @id @default(autoincrement())
  title                 String?
  description           String?
  githubRepo            String?
  groupId               Int
  group                 Group            @relation(fields: [groupId], references: [id])
  proposedTitle         String?
  titleStatus           TitleStatus?     @default(PENDING)
  titleProposalDeadline DateTime?
  subjects              ProjectSubject[]
  submissions           Submission[]

  @@index([groupId])
}

// Title status enumeration
enum TitleStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Many-to-many relationship between Project and Subject
model ProjectSubject {
  projectId Int
  subjectId Int
  project   Project @relation(fields: [projectId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([projectId, subjectId])
}

// Review model for project evaluations
model Review {
  id          Int          @id @default(autoincrement())
  name        String
  deadline    DateTime
  rubrics     Rubric[]
  submissions Submission[]
}

// Rubric model for evaluation criteria
model Rubric {
  id               Int               @id @default(autoincrement())
  reviewId         Int
  review           Review            @relation(fields: [reviewId], references: [id])
  criterion        String
  maxScore         Int
  evaluationScores EvaluationScore[]

  @@index([reviewId])
}

// Submission model for student submissions per review
model Submission {
  id          Int          @id @default(autoincrement())
  projectId   Int
  project     Project      @relation(fields: [projectId], references: [id])
  reviewId    Int
  review      Review       @relation(fields: [reviewId], references: [id])
  report      String // Markdown report
  fileUrl     String // URL to uploaded file (e.g., PPT/PDF)
  submittedAt DateTime
  llmSummary  String? // Generated by LLM
  evaluations Evaluation[]

  @@index([projectId])
  @@index([reviewId])
}

// Evaluation model by staff
model Evaluation {
  id           Int               @id @default(autoincrement())
  submissionId Int
  submission   Submission        @relation(fields: [submissionId], references: [id])
  staffId      Int
  staff        User              @relation("StaffEvaluations", fields: [staffId], references: [id])
  comment      String?
  scores       EvaluationScore[]
}

// Scores for each rubric in an evaluation
model EvaluationScore {
  id           Int        @id @default(autoincrement())
  evaluationId Int
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  rubricId     Int
  rubric       Rubric     @relation(fields: [rubricId], references: [id])
  score        Int
}
